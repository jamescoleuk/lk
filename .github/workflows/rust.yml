on: [push, pull_request]

name: Continuous integration

jobs:
  check:
    name: Check the current package and dependencies for errors
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Check formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Run clippy linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - name: cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  release:
    needs: [test]
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-musl
            bin: "lk"
            name: "lk-Linux-x86_64.tar.gz"
          - os: macOS-latest
            rust: stable
            target: x86_64-apple-darwin
            bin: "lk"
            name: "lk-Darwin-x86_64.tar.gz"
            # TODO: add apple silicon
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup Rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - name: Setup musl-gcc
        if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get install musl-tools
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      - name: Package
        shell: bash
        run: |
          strip target/${{ matrix.target }}/release/${{ matrix.bin }}
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ matrix.name }} ${{ matrix.bin }}
          cd -
      - name: Publish
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ matrix.name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
